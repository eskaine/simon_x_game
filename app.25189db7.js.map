{"version":3,"sources":["scripts/data.js","scripts/animation.js","scripts/scripts.js","scripts/app.js"],"names":["level","speed","isGameStart","isMaxSpeed","isSpeedUp","isStrictOff","isGameover","isRunning","isPanelsLock","isAudioOn","sequences","inputs","panelsID","params","flashTime","toggleColors","on","off","turnStatus","go","color","text","wait","stop","retry","audio","clips","error","runningEvents","timeouts","intervals","toggleSettings","toHide","settingsBtn","document","getElementById","classList","remove","add","toggleModal","querySelector","timeOut","className","timing","element","callback","setTimeout","toggle","introScreen","brandOverlay","DOM","underlay","brand","style","display","runningLights","index","round","interval","setInterval","flashPanel","state","length","clearEvents","timeout1","i","timeout2","push","startScreen","playClick","changeLevel","changeLevelTextCallback","status","runGame","sequencing","isNew","n","setSpeed","isNotRepeat","togglePlayButton","changeStatus","turnText","Math","random","flashSpeed","playAudio","clearInterval","innerHTML","Audio","play","toDisable","playButton","resetGame","levelText","innerText","resetState","window","t","clearTimeout","playerInput","panel","Number","checkInput","settingsOverlay","addEventListener","e","target","value","includes","dataset","tagName","parentNode","id"],"mappings":"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","file":"app.25189db7.js","sourceRoot":"../src","sourcesContent":["// Game Data\nexport default {\n  level: 1,\n  speed: 1200,\n  isGameStart: false,\n  isMaxSpeed: false,\n  isSpeedUp: false,\n  isStrictOff: true,\n  isGameover: false,\n  isRunning: false,\n  isPanelsLock: true,\n  isAudioOn: true,\n  sequences: [],\n  inputs: [],\n  panelsID: [\"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"p6\"],\n  params: {\n    flashTime: 600,\n    toggleColors: { on: \"#2E7D32\", off: \"#c62828\" },\n    turnStatus: {\n      go: { color: \"#2ecc71\", text: \"Your Turn\" },\n      wait: { color: \"#f1c40f\", text: \"Running Sequence\" },\n      stop: { color: \"#e74c3c\", text: \"Game Over\" },\n      retry: { color: \"#e74c3c\", text: \"Retry\" },\n    },\n  },\n  audio: {\n    clips: [\n      \"assets/do.wav\",\n      \"assets/re.wav\",\n      \"assets/mi.wav\",\n      \"assets/fa.wav\",\n      \"assets/so.wav\",\n      \"assets/la.wav\",\n    ],\n    error: \"assets/error.wav\",\n  },\n  runningEvents: {\n    timeouts: [],\n    intervals: [],\n  },\n};\n","import state from \"./data.js\";\nimport func from \"./scripts.js\";\nimport DOM from \"./app.js\";\n\nexport default (() => {\n  // Intro screen before actual game\n  function introScreen() {\n    let brandOverlay = DOM.document.querySelector(\".brand-overlay\");\n    let underlay = DOM.document.querySelector(\".underlay\");\n    let brand = DOM.document.querySelector(\".brand\");\n\n    timeOut(\"animate__fadeInDown\", 1500, brand, () => {\n      brandOverlay.classList.remove(\"animate__fadeIn\");\n      timeOut(\"animate__bounce\", 700, brand, () => {\n        brand.classList.remove(\"animate__fadeInDown\");\n      });\n    });\n\n    timeOut(\"animate__fadeOut\", 3800, brandOverlay, () => {\n      timeOut(null, 2300, null, () => {\n        brandOverlay.style.display = \"none\";\n      });\n    });\n\n    timeOut(\"animate__fadeOut\", 6300, underlay, () => {\n      runningLights();\n      toggleSettings(false);\n      timeOut(null, 300, null, () => {\n        underlay.style.display = \"none\";\n      });\n    });\n  }\n\n  // Title/Start screen\n  function startScreen() {\n    let playClick = DOM.document.querySelector(\".play-click\");\n\n    // remove unused classes\n    playClick.classList.remove(\n      \"animate__infinite\",\n      \"animate__slow\",\n      \"animate__flash\"\n    );\n\n    // clear start screen\n    DOM.document.querySelector(\".title\").classList.add(\"animate__backOutUp\");\n    playClick.classList.add(\"animate__backOutDown\");\n    timeOut(null, 500, null, () => {\n      DOM.document.querySelector(\".overlay\").style.display = \"none\";\n      DOM.document\n        .querySelector(\".status\")\n        .classList.add(\"animate__slideInDown\");\n      DOM.document.getElementById(\"play\").classList.add(\"animate__slideInUp\");\n    });\n  }\n\n  // Status text\n  function changeLevel(changeLevelTextCallback) {\n    let status = DOM.document.querySelector(\".status\");\n    status.classList.remove(\"animate__slideInDown\", \"animate__fadeInDown\");\n\n    timeOut(null, 0, null, () => {\n      status.classList.add(\"animate__fadeOutUp\");\n      setTimeout(() => {\n        changeLevelTextCallback();\n        status.classList.remove(\"animate__fadeOutUp\");\n        status.classList.add(\"animate__fadeInDown\");\n      }, 500);\n    });\n  }\n\n  // Start screen running lights\n  function runningLights() {\n    let index = 0;\n    let round = 0;\n    let interval = setInterval(() => {\n      func.flashPanel(DOM.document.getElementById(state.panelsID[index]), 800);\n      index++;\n\n      // running light interval flash\n      if (round >= 6 && index === state.panelsID.length) {\n        //clearInterval(interval);\n        func.clearEvents();\n        let timeout1 = setTimeout(() => {\n          for (let i = 0; i < state.panelsID.length; i++) {\n            func.flashPanel(DOM.document.getElementById(state.panelsID[i]), 500);\n          }\n\n          let timeout2 = setTimeout(() => {\n            runningLights();\n          }, 1000);\n          // storing timeouts 1\n          state.runningEvents.timeouts.push(timeout2);\n        }, 1100);\n        // storing timeouts 2\n        state.runningEvents.timeouts.push(timeout1);\n      }\n\n      // setting up for the above interval flash\n      if (index >= state.panelsID.length) {\n        index = 0;\n        round++;\n      }\n    }, 100);\n\n    // storing intervals\n    state.runningEvents.intervals.push(interval);\n  }\n\n  // Settings button\n  function toggleSettings(toHide) {\n    let settingsBtn = document.getElementById(\"settings\");\n    settingsBtn.classList.remove(\"animate__fadeIn\", \"animate__fadeOut\");\n    if (toHide) {\n      settingsBtn.classList.add(\"animate__fadeOut\");\n    } else {\n      settingsBtn.classList.add(\"animate__fadeIn\");\n    }\n  }\n\n  // Modal\n  function toggleModal(toHide) {\n    let settingsBtn = document.querySelector(\".settings-modal\");\n    settingsBtn.classList.remove(\"animate__slideInDown\", \"animate__slideOutUp\");\n    if (toHide) {\n      settingsBtn.classList.add(\"animate__slideOutUp\");\n    } else {\n      settingsBtn.classList.add(\"animate__slideInDown\");\n    }\n  }\n\n   // Timeout helper\n   function timeOut(className, timing, element = null, callback = null) {\n    setTimeout(() => {\n      if (callback) {\n        callback();\n      }\n\n      if (element) {\n        element.classList.toggle(className);\n      }\n    }, timing);\n  }\n\n  return {\n    introScreen: introScreen,\n    startScreen: startScreen,\n    changeLevel: changeLevel,\n    toggleSettings: toggleSettings,\n    toggleModal,\n    toggleModal,\n  };\n})();\n","import state from \"./data.js\";\nimport DOM from \"./app.js\";\nimport animation from \"./animation.js\";\n\nexport default (() => {\n  function runGame() {\n    sequencing(true);\n  }\n\n  function nextLevel() {\n    state.level++;\n    state.sequences = [];\n    state.inputs = [];\n  }\n\n  function resetGame() {\n    state.level = 1;\n    state.speed = 1200;\n    state.isGameover = false;\n    animation.changeLevel(() => {\n      DOM.levelText.innerText = `Level: ${state.level}`;\n    });\n  }\n\n  function resetState() {\n    state.inputs = [];\n    state.sequences = [];\n  }\n\n  // Track player input\n  function playerInput(panel) {\n    let index = Number(panel);\n    playAudio(state.audio.clips[index]);\n\n    // log player input\n    state.inputs.push(index);\n\n    // player can only input as long as the generated sequences length\n    if (state.inputs.length === state.sequences.length) {\n      state.isPanelsLock = true;\n      setTimeout(() => checkInput(), 500);\n    }\n  }\n\n  // Compare player input to state.sequences\n  function checkInput() {\n    for (let i in state.sequences) {\n      if (state.inputs[i] !== state.sequences[i]) {\n        playAudio(state.audio.error);\n\n        // retry if strict is off else game over\n        if (state.isStrictOff) {\n          changeStatus(DOM.turnText, state.params.turnStatus.retry);\n          setTimeout(() => sequencing(false), 2000);\n        } else {\n          state.isGameover = true;\n          changeStatus(DOM.turnText, state.params.turnStatus.stop);\n        }\n        break;\n      }\n\n      // continue game if all input is correct\n      if (i == state.sequences.length - 1) {\n        nextLevel();\n        animation.changeLevel(() => {\n          DOM.levelText.innerText = `Level: ${state.level}`;\n          DOM.turnText.innerText = `Next...`;\n        });\n        setTimeout(() => runGame(), 1500);\n      }\n    }\n  }\n\n  // Generate new sequence or replay existing seqeunce\n  function sequencing(isNew) {\n    setSpeed(isNew);\n    togglePlayButton(true);\n    changeStatus(DOM.turnText, state.params.turnStatus.wait);\n    state.isRunning = true;\n    let n;\n\n    if (isNew) {\n      n = state.level;\n    } else {\n      state.inputs = [];\n      n = 0;\n    }\n\n    let interval = setInterval(() => {\n      let index;\n\n      // generate new sequence\n      if (isNew) {\n        index = Math.round(Math.random() * (state.panelsID.length - 1));\n        state.sequences.push(index);\n        n--;\n        // set to existing sequence\n      } else {\n        index = state.sequences[n];\n        n++;\n      }\n\n      // display sequence\n      let flashSpeed =\n        state.speed < state.params.flashTime\n          ? state.speed\n          : state.params.flashTime;\n      playAudio(state.audio.clips[index]);\n      flashPanel(\n        DOM.document.getElementById(state.panelsID[index]),\n        flashSpeed\n      );\n\n      // pass control to player when sequencing end\n      if (n === (isNew ? 0 : state.sequences.length)) {\n        clearInterval(interval);\n        prepPlayer();\n        setTimeout(() => {\n          togglePlayButton(false);\n        }, 800);\n      }\n    }, state.speed);\n  }\n\n  /* Helper functions */\n\n  // Set panel flash speed\n  function setSpeed(isNotRepeat) {\n    // speed up\n    if (\n      !state.isMaxSpeed &&\n      state.isSpeedUp &&\n      isNotRepeat &&\n      state.level > 1 &&\n      state.speed > 200\n    ) {\n      state.speed -= 50;\n    }\n\n    // set max speed\n    if (state.isMaxSpeed) {\n      state.speed = 200;\n    }\n  }\n\n  // Clear all timeouts and intervals\n  function clearEvents() {\n    let timeouts = state.runningEvents.timeouts;\n    let intervals = state.runningEvents.intervals;\n\n    for (let i of intervals) {\n      window.clearInterval(i);\n    }\n\n    for (let t of timeouts) {\n      window.clearTimeout(t);\n    }\n  }\n\n  // Setup player turn\n  function prepPlayer() {\n    setTimeout(() => {\n      state.isRunning = false;\n      state.isPanelsLock = false;\n      changeStatus(DOM.turnText, state.params.turnStatus.go);\n    }, 1200);\n  }\n\n  // Panel flash\n  function flashPanel(element, flashTime = state.params.flashTime) {\n    element.classList.add(\"active\");\n    setTimeout(() => {\n      element.classList.remove(\"active\");\n    }, flashTime);\n  }\n\n  // Change status text\n  function changeStatus(element, status) {\n    element.style.color = status.color;\n    element.innerHTML = status.text;\n  }\n\n  function playAudio(clips) {\n    if (state.isAudioOn) {\n      new Audio(clips).play();\n    }\n  }\n\n  function togglePlayButton(toDisable) {\n    if (toDisable) {\n      DOM.playButton.classList.add(\"toggleOff\");\n    } else {\n      DOM.playButton.classList.remove(\"toggleOff\");\n    }\n  }\n\n  return {\n    runGame: runGame,\n    resetGame: resetGame,\n    resetState: resetState,\n    clearEvents: clearEvents,\n    playerInput: playerInput,\n    flashPanel: flashPanel,\n    playAudio: playAudio\n  };\n})();\n","import \"../styles/styles.scss\";\nimport func from \"./scripts.js\";\nimport animate from \"./animation.js\";\nimport state from \"./data.js\";\n\nconst levelText = document.getElementById(\"level\");\nconst turnText = document.getElementById(\"turn\");\nconst playButton = document.getElementById(\"play\");\nconst settingsOverlay = document.querySelector(\".settings-overlay\");\n\n// Autorun Game Intro\nwindow.addEventListener(\"load\", (e) => {\n  animate.introScreen();\n});\n\n// Clear Home Screen\ndocument.querySelector(\".overlay\").addEventListener(\"click\", (e) => {\n  if (e.target.classList.value.includes(\"overlay\")) {\n    func.clearEvents();\n    func.playAudio(\"assets/home.mp3\");\n    animate.startScreen();\n  }\n});\n\n// Start Game\nplayButton.addEventListener(\"click\", (e) => {\n  if (state.isGameover) {\n    func.resetGame();\n  }\n\n  if (!state.isRunning) {\n    state.isGameStart = true;\n    state.isRunning = true;\n    func.resetState();\n    func.runGame();\n  }\n});\n\n// Player Input\ndocument.querySelector(\".panels-container\").addEventListener(\"click\", (e) => {\n  if (!state.isPanelsLock && state.inputs.length < state.sequences.length) {\n    func.playerInput(e.target.dataset.panel);\n  }\n});\n\n// Settings Toggle\ndocument.querySelector(\".settings-modal\").addEventListener(\"click\", (e) => {\n  if (e.target.tagName === \"I\") {\n    e.target.classList.toggle(\"toggleOff\");\n  }\n\n  if (e.target.parentNode.id === \"volume\") {\n    state.isAudioOn = state.isAudioOn ? false : true;\n  }\n\n  if (e.target.parentNode.id === \"redo\") {\n    state.isStrictOff = state.isStrictOff ? false : true;\n  }\n\n  if (e.target.parentNode.id === \"speed\") {\n    state.isSpeedUp = state.isSpeedUp ? false : true;\n  }\n\n  if (e.target.parentNode.id === \"max-speed\") {\n    state.isMaxSpeed = state.isMaxSpeed ? false : true;\n  }\n});\n\n// Display Modal\ndocument.getElementById(\"settings\").addEventListener(\"click\", (e) => {\n  animate.toggleSettings(true);\n  settingsOverlay.style.display = \"block\";\n  animate.toggleModal(false);\n});\n\n// Hide Modal\nsettingsOverlay.addEventListener(\"click\", (e) => {\n  if (e.target.classList.value.includes(\"settings-overlay\")) {\n    animate.toggleModal(true);\n\n    setTimeout(() => {\n      settingsOverlay.style.display = \"none\";\n      animate.toggleSettings(false);\n    }, 800);\n  }\n});\n\nexport default { document, levelText, turnText, playButton };\n"]}